{"version":3,"sources":["actions.js","api/api.js","constants.js","components/card.js","components/cardlist.js","components/searchbox.js","components/scroll.js","components/errorboundry.js","containers/app.js","reducers.js","serviceWorker.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","event","target","value","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cfdf09be.chunk.js","sourcesContent":["import { apiCall } from './api/api'\nimport { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAIL\n} from './constants.js'\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\tapiCall('https://jsonplaceholder.typicode.com/users')\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n\t\t.catch(error => dispatch ({ type: REQUEST_ROBOTS_FAIL, payload: error }))\n}","export const apiCall = (link) =>\n  fetch(link).then(response => response.json())","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAIL = 'REQUEST_ROBOTS_FAIL';\n","import React from 'react';\n\nconst Card = ({name, email, id}) => {\n\treturn (\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './card.js';\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t{\n\t\t\trobots.map((user, i) => {\n\t\t\treturn (\n\t\t\t\t<Card \n\t\t\t\tkey={i} \n\t\t\t\tid={robots[i].id} \n\t\t\t\tname={robots[i].name} \n\t\t\t\temail={robots[i].email}\n\t\t\t\t/>\n\t\t\t)\n\t\t})\n\t}\n\t</div>\n\t)\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t<input \n\t\t\tclassName='pa3 ba b--green bg-lightest-blue' \n\t\t\ttype='search' \n\t\t\tplaceholder='search robots' \n\t\t\tonChange={searchChange}\n\t\t/>\n\t\t</div>\n\t\t);  \n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflow: 'scroll', border: '5px solid black', height: '600px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t\t)\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({ hasError: true})\n\t}\n\n\trender () {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oops. That is not good.</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport CardList from '../components/cardlist';\nimport SearchBox from '../components/searchbox';\nimport Scroll from '../components/scroll';\nimport ErrorBoundry from '../components/errorboundry';\n\nimport '../containers/app.css'\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\t\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\t\n\trender() {\n\t\tconst { robots, searchField, onSearchChange, isPending } = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\t\n\t\treturn (\n\t\t\t\t<div className='tc'>\n\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t{ isPending ? <h1>Loading</h1> :\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t}\n\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAIL\n} from './constants.js'\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField:action.payload});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch(action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, { isPending: true })\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false })\n\t\tcase REQUEST_ROBOTS_FAIL:\n\t\t\treturn Object.assign({}, state, { error: action.payload , isPending: false })\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\n\nimport './index.css';\nimport App from './containers/app';\nimport { requestRobots, searchRobots } from './reducers'\n\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger()\n\nconst rootReducers = combineReducers({requestRobots, searchRobots})\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}